version: '3.8'
services:
  bind9:
    build:
      context: .
      dockerfile: Dockerfile_bind9
    ports:
      - "5300:53/tcp"
      - "5300:53/udp"
    volumes:
      - ./bind_config:/etc/bind
    networks:
      app_network:
        ipv4_address: 172.31.0.2
    cap_add:
      - NET_ADMIN

  jenkins:
    build:
      context: .
      dockerfile: Dockerfile_jenkins
    image: my-jenkins
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - ./jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    stdin_open: true
    tty: true

  #terraform:
  #  build:
  #    context: .
  #    dockerfile: Dockerfile_terraform
  #  volumes:
  #    - ./terraform:/app
  #  working_dir: /app
  #  command: [ "terraform init" ]
  #  stdin_open: true
  #  tty: true

  registry:
    image: registry:2
    ports:
      - "5000:5000"
    restart: always

  angular-dev-env:
    image: localhost:5000/angular-dev-env:latest
    build:
      context: .
      dockerfile: Dockerfile_angular-dev-env
    depends_on:
      - registry
    command: [ "/bin/sh", "-c", "docker tag angular-dev-env:latest localhost:5000/angular-dev-env:latest && docker push localhost:5000/angular-dev-env:latest" ]
    tty: true
    stdin_open: true

  angular-dev:
    build:
      context: .
      dockerfile: Dockerfile_angular-dev-env
    container_name: angular-dev
    ports:
      - "4200:4200"
      - "2222:22"
    networks:
      deploy-network:
        ipv4_address: 172.32.0.3
    command: ["/bin/bash", "-c", "/usr/sbin/sshd && /bin/bash"]
    tty: true
    stdin_open: true


  angular-app:
    build:
      context: .
      dockerfile: Dockerfile_angular-dev-env
    ports:
      - "4201:4200"
      - "4202:80"
    networks:
      app_network:
        ipv4_address: 172.31.0.3
    cap_add:
      - NET_ADMIN

  prometheus:
    build:
      context: .
      dockerfile: Dockerfile_prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  nginx:
    build:
      context: .
      dockerfile: Dockerfile_nginx

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - grafana-data:/var/lib/grafana

  graylog:
    image: graylog/graylog:5.0
    container_name: graylog
    environment:
      GRAYLOG_HTTP_EXTERNAL_URI: "http://localhost:9000/"
    depends_on:
      - mongo
      - elasticsearch
    ports:
      - "9000:9000"
      - "12201:12201/udp"

  mongo:
    image: mongo:latest
    container_name: mongo

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"

  zabbix-server:
    image: zabbix/zabbix-server-mysql:latest
    container_name: zabbix-server
    environment:
      DB_SERVER_HOST: zabbix-mysql
      MYSQL_USER: root
      MYSQL_PASSWORD: zabbix_password
      MYSQL_DATABASE: zabbix
    depends_on:
      - zabbix-mysql
    ports:
      - "10051:10051"

  zabbix-mysql:
    image: mysql:latest
    container_name: zabbix-mysql
    environment:
      MYSQL_ROOT_PASSWORD: zabbix_password
      MYSQL_DATABASE: zabbix
    ports:
      - "3306:3306"

volumes:
  grafana-data:

networks:
  app_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.31.0.0/16
  deploy-network:
    name: deploy-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.32.0.0/16
